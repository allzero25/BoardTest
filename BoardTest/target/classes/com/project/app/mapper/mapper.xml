<?xml version="1.0" encoding="UTF-8"?>
<!-- #4. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper">
	
	<!-- ===== tbl_member ===== -->
	
	<!-- 아이디에 대한 회원정보 가져오기 -->
	<select id="getMemberById" parameterType="String" resultType="MemberVO">
		select userid, name, email, phone, birthday, gender, registerday, status
		from tbl_member
		where userid = #{userid}
	</select>
	
	<!-- 이메일에 대한 회원정보 가져오기 -->
	<select id="getMemberByEmail" parameterType="String" resultType="MemberVO">
		select userid, name, email, phone, birthday, gender, registerday, status
		from tbl_member
		where email = #{email}
	</select>
	
	<!-- 휴대폰에 대한 회원정보 가져오기 -->
	<select id="getMemberByPhone" parameterType="String" resultType="MemberVO">
		select userid, name, email, phone, birthday, gender, registerday, status
		from tbl_member
		where phone = #{phone}
	</select>
	
	<!-- 회원가입 처리하기 (tbl_member 테이블 insert) -->
	<insert id="signUp" parameterType="MemberVO">
		insert into tbl_member(userid, name, email, password, phone, birthday, gender)
		values(#{userid}, #{name}, #{email}, #{password}, #{phone}, #{birthday}, #{gender})
	</insert>
	
	<!-- 로그인 처리하기 -->
	<select id="getLoginMember" parameterType="HashMap" resultType="MemberVO">
		select userid, name, email, phone, birthday, gender, registerday, status
		from tbl_member
		where userid = #{userid} and password = #{password}
	</select>
	
	<!-- 성명,휴대폰번호에 대한 아이디 가져오기 -->
	<select id="getUseridByNamePhone" parameterType="HashMap" resultType="String">
		select userid
		from tbl_member
		where name = #{name} and phone = #{phone}
	</select>
	
	<!-- 아이디,성명,이메일에 맞는 사용자 가져오기 -->
	<select id="getMemberByIdNameEmail" parameterType="HashMap" resultType="MemberVO">
		select userid, name, email, phone, birthday, gender, registerday, status
		from tbl_member
		where userid = #{userid} and name = #{name} and email = #{email}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="pwUpdate" parameterType="HashMap">
		update tbl_member
		set password = #{password}
		where userid = #{userid}
	</update>
	
	
	
	
	<!-- ===== tbl_board ===== -->
	
	<!-- 게시판 글 작성 -->
	<insert id="insertBoard" parameterType="BoardVO" useGeneratedKeys="true" keyProperty="boardSeq">
		insert into tbl_board(fk_userid, name, subject, content)
		values(#{fk_userid}, #{name}, #{subject}, #{content})
	</insert>
	
	<!-- 게시판 이미지 테이블 추가 -->
	<insert id="insertBoardImg" parameterType="HashMap">
		insert into tbl_board_img(fk_boardSeq, filename)
		values(#{fk_boardSeq}, #{filename})
	</insert>
	
	<!-- 게시판 총 게시물 수 -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		SELECT COUNT(*)
		FROM tbl_board
		WHERE STATUS = 1
		<choose>
			<when test="searchType == 'subject' and searchWord != ''">
				AND LOWER(subject) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
			</when>
			<when test="searchType == 'content' and searchWord != ''">
				AND LOWER(content) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
			</when>
			<when test="searchType == 'name' and searchWord != ''">
				AND LOWER(name) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
			</when>
		</choose>
	</select>
	
	<!-- 글 목록 가져오기 -->
	<select id="getBoardList" parameterType="HashMap" resultType="BoardVO">
		SELECT boardSeq, fk_userid, name, subject, content, readCount, date_format(regDate, '%Y-%m-%d') AS regDate, commentCount, I.filename AS thumbnailImg
		FROM tbl_board B
		LEFT JOIN (
		    SELECT fk_boardSeq, filename
		    FROM (
		        SELECT fk_boardSeq, filename, imgSeq,
		               ROW_NUMBER() OVER (PARTITION BY fk_boardSeq ORDER BY imgSeq) AS rownum
		        FROM tbl_board_img
		    ) AS subquery
		    WHERE rownum = 1
		) I
		ON B.boardSeq = I.fk_boardSeq
		WHERE B.status = 1
		<choose>
			<when test="searchType == 'subject' and searchWord !=''">
				AND LOWER(subject) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
			</when>
			<when test="searchType == 'content' and searchWord !=''">
				AND LOWER(content) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
			</when>
			<when test="searchType == 'name' and searchWord !=''">
				AND LOWER(name) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
			</when>
		</choose>
		
		<choose>
		    <when test="sortType == 'boardSeq'">
		        ORDER BY boardSeq DESC
		    </when>
		    <when test="sortType == 'readCount'">
		        ORDER BY readCount DESC
		    </when>
	     	<when test="sortType == 'commentCount'">
		        ORDER BY commentCount DESC
		    </when>
		    <otherwise>
		        ORDER BY boardSeq DESC
		    </otherwise>
		</choose>
		
		LIMIT #{countPerPage} OFFSET #{offset}
	</select>
	
	<!-- 글 조회하기 -->
	<select id="getBoard" parameterType="HashMap" resultType="BoardVO">
		SELECT prevSeq, prevSubject,
			   boardSeq, fk_userid, name, subject, content, readCount, regDate, commentCount,
			   nextSeq, nextSubject
		FROM
		(
			SELECT boardSeq, fk_userid, name, subject, content, readCount, date_format(regDate, '%Y-%m-%d %H:%i') AS regDate, commentCount,
		           LAG(boardSeq) OVER(ORDER BY 
		               CASE 
		                   WHEN #{sortType} = 'readCount' THEN readCount
		                   WHEN #{sortType} = 'commentCount' THEN commentCount
		                   ELSE boardSeq
		               END DESC) AS prevSeq,
		           LAG(subject) OVER(ORDER BY 
		               CASE 
		                   WHEN #{sortType} = 'readCount' THEN readCount
		                   WHEN #{sortType} = 'commentCount' THEN commentCount
		                   ELSE boardSeq
		               END DESC) AS prevSubject,
		           LEAD(boardSeq) OVER(ORDER BY 
		               CASE 
		                   WHEN #{sortType} = 'readCount' THEN readCount
		                   WHEN #{sortType} = 'commentCount' THEN commentCount
		                   ELSE boardSeq
		               END DESC) AS nextSeq,
		           LEAD(subject) OVER(ORDER BY 
		               CASE 
		                   WHEN #{sortType} = 'readCount' THEN readCount
		                   WHEN #{sortType} = 'commentCount' THEN commentCount
		                   ELSE boardSeq
		               END DESC) AS nextSubject
		    FROM tbl_board
		    WHERE STATUS = 1
			<choose>
				<when test="searchType == 'subject' and searchWord != ''">
					AND LOWER(subject) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
				</when>
				<when test="searchType == 'content' and searchWord != ''">
					AND LOWER(content) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
				</when>
				<when test="searchType == 'name' and searchWord != ''">
					AND LOWER(NAME) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
				</when>
			</choose>
		) V
		WHERE V.boardSeq = #{boardSeq}
	</select>
	
	<!-- 글 조회수 1 증가 -->
	<update id="updateReadCount" parameterType="String">
		update tbl_board
		set readCount = readCount + 1
		where boardSeq = #{boardSeq}
	</update>
	
	<!-- 글에 대한 첨부파일 이미지 리스트 가져오기 -->
	<resultMap type="HashMap" id="boardImgMap">
		<result property="imgSeq" column="imgSeq" javaType="String" />
		<result property="fk_boardSeq" column="fk_boardSeq" javaType="String" />
		<result property="filename" column="filename" javaType="String" />
	</resultMap>
	<select id="getBoardImgList" parameterType="String" resultMap="boardImgMap">
		select imgSeq, fk_boardSeq, filename
		from tbl_board_img
		where fk_boardSeq = #{boardSeq}
		order by imgSeq
	</select>
	
	<!-- 글 수정하기 -->
	<update id="updateBoard" parameterType="BoardVO">
		update tbl_board
		set subject = #{subject}, content = #{content}
		where boardSeq = #{boardSeq}
	</update>
	
	<!-- 게시판 이미지 테이블 삭제 -->
	<delete id="deleteBoardImg" parameterType="String">
		delete from tbl_board_img
		where imgSeq = #{imgSeq}
	</delete>
	
	<!-- 댓글 테이블 groupno 최대값 구하기 -->
	<select id="getGroupnoMax" resultType="int">
		SELECT IFNULL(MAX(groupno), 0)
		FROM tbl_comment
	</select>
	
	<!-- 댓글 작성하기 -->
	<insert id="insertComment" parameterType="CommentVO">
		<!-- 원댓글일 경우 -->
		<if test="parentSeq == null">
			insert into tbl_comment(fk_userid, name, content, fk_boardSeq, groupno)
			values(#{fk_userid}, #{name}, #{content}, #{fk_boardSeq}, #{groupno})
		</if>
		
		<!-- 답댓글일 경우 -->
		<if test="parentSeq != null">
			insert into tbl_comment(fk_userid, name, content, fk_boardSeq, groupno, parentSeq)
			values(#{fk_userid}, #{name}, #{content}, #{fk_boardSeq}, #{groupno}, #{parentSeq})
		</if>
	</insert>
	
	<!-- 게시판 테이블 댓글 개수 증가 -->
	<update id="updateCommentCount" parameterType="HashMap">
		update tbl_board
		set commentCount = commentCount + #{count}
		where boardSeq = #{boardSeq}
	</update>
	
	<!-- 댓글 목록 조회 -->
	<select id="getCommentList" parameterType="HashMap" resultType="CommentVO">
		WITH RECURSIVE comment_tree AS (
		    SELECT commentSeq, fk_userid, name, content, 
		           DATE_FORMAT(regDate, '%Y-%m-%d %H:%i') AS regDate, 
		           fk_boardSeq, status, groupno, parentSeq
		    FROM tbl_comment
		    WHERE parentSeq = 0 AND (STATUS = 1 
			 		OR (STATUS = 0 AND EXISTS (
					 		SELECT 1
					 		FROM tbl_comment sub
					 		WHERE sub.parentSeq = tbl_comment.commentSeq
					 		AND sub.status = 1
					 ))
				)
				
		    UNION ALL
		
		    SELECT c.commentSeq, c.fk_userid, c.name, c.content, 
		           DATE_FORMAT(c.regDate, '%Y-%m-%d %H:%i'), 
		           c.fk_boardSeq, c.status, c.groupno, c.parentSeq
		    FROM tbl_comment c
		    INNER JOIN comment_tree ct
		    ON c.parentSeq = ct.commentSeq
		    WHERE c.status = 1
		)
		SELECT * FROM comment_tree
		WHERE fk_boardSeq = #{fk_boardSeq}
		ORDER BY groupno DESC, commentSeq ASC
		LIMIT #{countPerPage} OFFSET #{offset}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="updateComment" parameterType="CommentVO">
		update tbl_comment
		set content = #{content}
		where commentSeq = #{commentSeq}
	</update>
	
	<!-- 댓글 삭제(status를 0으로 update) -->
	<update id="updateCommentStatus" parameterType="String">
		update tbl_comment
		set status = 0
		where commentSeq = #{commentSeq}
	</update>
	
	<!-- 글번호에 대한 댓글 목록 불러오기 (페이징X) -->
	<select id="getCommentListNoPaging" parameterType="String" resultType="CommentVO">
		select *
		from tbl_comment
		where status = 1
		and fk_boardSeq = #{boardSeq}
	</select>
	
	<!-- 글 삭제(status를 0으로 update) -->
	<update id="updateBoardStatus" parameterType="String">
		update tbl_board
		set status = 0
		where boardSeq = #{boardSeq}
	</update>
	
</mapper>
